#!/bin/bash -e

show_help() {
    echo "usage: remote.refresh [--channel CHANNEL] [--snap SNAPNAME]"
    echo ""
    echo "Available options:"
    echo "  -h --help   show this help message."
    echo ""
}

check_refresh(){
    local refresh_channel=$1
    local snap=$2

    remote.wait-for no-ssh -n 30 --wait 2
    remote.wait-for ssh -n 120 --wait 2
    remote.retry -n 10 --wait 2  "snap info $snap | grep \"tracking: +(latest/${refresh_channel}|${refresh_channel})\""
}


refresh_kernel() {
    local refresh_channel=$1
    local kernel_line kernel_name kernel_channel

    kernel_line=$(remote.exec "snap list | grep -E 'kernel$'")
    if [ -z "$kernel_line" ]; then
        echo "remote.refresh: no kernel snap to update"
        return
    fi
    kernel_name=$(echo "$kernel_line" | awk '{ print $1 }')
    kernel_channel=$(echo "$kernel_line" | awk '{ print $4 }')
    
    if [ -z "$refresh_channel" ]; then
        refresh_channel="$kernel_channel"
    fi

    output=$(remote.exec "sudo snap refresh --channel ${refresh_channel} $kernel_name 2>&1" || true)
    if echo "$output" | grep -E "(no updates available|cannot refresh \"$kernel_name\"|is not installed)"; then
        echo "remote.refresh: snap \"$kernel_name\" has no updates available"
    else
        check_refresh "$refresh_channel" "$kernel_name"
    fi
}

refresh_snapd(){
    local refresh_channel=$1
    local snapd_line snapd_name snapd_channel

    snapd_line=$(remote.exec "snap list | grep -E 'snapd$'")
    if [ -z "$snapd_line" ]; then
        echo "remote.refresh: no snapd snap to update"
        return
    fi
    snapd_name=$(echo "$snapd_line" | awk '{ print $1 }')
    snapd_channel=$(echo "$snapd_line" | awk '{ print $4 }')

    if [ -z "$refresh_channel" ]; then
        refresh_channel="$snapd_channel"
    fi

    # Run update and make "|| true" to continue when the connection is closed by remote host
    output=$(remote.exec "sudo snap refresh --channel ${refresh_channel} $snapd_name 2>&1" || true)
    if echo "$output" | grep -E "(no updates available|cannot refresh \"$snapd_name\"|is not installed)"; then
        echo "remote.refresh: snap \"$snapd_name\" has no updates available"
    else
        check_refresh "$refresh_channel" "$snapd_name"
    fi
}

refresh_core(){
    local refresh_channel=$1
    local core_line core_name core_channel

    core_line=$(remote.exec "snap list | grep -E '(core18|core20|core22)'")
    if [ -z "$core_line" ]; then
        echo "remote.refresh: no core snap to update"
        return
    fi
    core_name=$(echo "$core_line" | awk '{ print $1 }')
    core_channel=$(echo "$core_line" | awk '{ print $4 }')

    if [ -z "$refresh_channel" ]; then
        refresh_channel="$core_channel"
    fi

    # Run update and make "|| true" to continue when the connection is closed by remote host
    output=$(remote.exec "sudo snap refresh --channel ${refresh_channel} $core_name 2>&1" || true)
    if echo "$output" | grep -E "(no updates available|cannot refresh \"$core_name\"|is not installed)"; then
        echo "remote.refresh: snap \"$core_name\" has no updates available"
    else
        check_refresh "$refresh_channel" "$core_name"
    fi
}

refresh_all(){
    # Run update and make "|| true" to continue when the connection is closed by remote host or not any snap to update
    remote.exec "sudo snap refresh" || true
    remote.wait-for ssh
}


get_boot_id() {
    remote.exec "cat /proc/sys/kernel/random/boot_id"
}


full_refresh(){
    remote.wait-for auto-refresh
    refresh_core "$core_channel"
    remote.wait-for auto-refresh
    refresh_snapd "$snapd_channel"
    remote.wait-for auto-refresh
    refresh_kernel "$kernel_channel"
    refresh_all
}



main() {
    local action wait attempts others
    case "$1" in
        -h|--help)
            show_help
            exit
            ;;
        ssh)
            action=wait_for_ssh
            attempts=800
            wait=1
            shift
            ;;
        no-ssh)
            action=wait_for_no_ssh
            attempts=200
            wait=1
            shift
            ;;
        snap-command)
            action=wait_for_snap_command
            attempts=200
            wait=1
            shift
            ;;
        reboot)
            action=wait_for_reboot
            attempts=150
            wait=5
            shift
            ;;
        device-initialized)
            action=wait_for_device_initialized
            attempts=60
            wait=1
            shift
            ;;
        *)
            echo "remote.wait-for: unsupported parameter $1" >&2
            exit 1
            ;;
    esac

    if [ -z "$(declare -f "$action")" ]; then
        echo "remote.wait-for: no such command: $action"
        show_help
        exit 1
    fi

    while [ $# -gt 0 ]; do
        case "$1" in
            --wait)                
                wait=$2
                shift 2
                ;;
            --attempts|-n)                
                attempts=$2
                shift 2
                ;;
            *)
                others="$others $1"
                shift
                ;;
        esac
    done

    "$action" "$attempts" "$wait" "$others"
}

main "$@"
